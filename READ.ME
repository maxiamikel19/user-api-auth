# USER AUTH API

Uma REST API desenvolvida com o objetivo de aprofundar os conhecimentos em autenticação e autorização de usuários utilizando Spring Security e OAuth2.

A API permite o gerenciamento básico de usuários, simulando um sistema real e funcional com segurança e boas práticas de desenvolvimento.

#ESTRUTURA:

    # Entidades:
        - User(id,username, password,[roles])
        - Role(id, name)

    # Funcionamento:
       - Ao executar a API pela primeira vez, as roles ADMIN e GUEST serão criadas automaticamente.
       - Durante o cadastro de usuários:
       - O primeiro usuário registrado recebe automaticamente a role ADMIN.
       - Os demais usuários registrados recebem a role GUEST.
       - Apenas usuários com a role ADMIN podem atribuir novas roles a outros usuários.
       - Para acessar os endpoints protegidos da API, o usuário precisa estar autenticado e possuir um token JWT válido.
       - Cada usuário é responsável por:
       - Manter sua conta atualizada.
       - Atualizar sua senha.
       - Excluir sua conta, se desejar.
       - A exclusão de usuários também pode ser feita por um ADMIN.

    # Tecnologias e Ferramentas
        - java v: 17
        - Spring Boot v: 3.5.3
        - spring-security
        - oauth2
        - DevTools
        - springdoc-openapi v:2.8.9
        - MYSQL v: 9.3
        - JWT
        - lombok
        - docker

    # Segurança
        - Autenticação baseada em JWT.
        - Autorização controlada por roles (ADMIN / GUEST).
        - Senhas criptografadas com BCrypt.

    # Documentação da API
        - Acesse a documentação interativa da API através do Swagger UI:
          - http://localhost:8080/swagger-ui.html

    # Como usar (Localmente)

        - Requisitos
            . Java 17+
            . Docker e docker-compose

        - Clone o repositório
        git clone https://github.com/maxiamikel19/user-api-auth.git

        - Acesse a pasta do projeto
        cd user-auth-api

        - Configure o banco de dados em application.properties
        spring.datasource.url=jdbc:mysql://localhost:3306/user_auth_db
        spring.datasource.username=seu_usuario
        spring.datasource.password=sua_senha

        - Execute o projeto
            - docker compose up
            - ./mvnw spring-boot:run

    # Principais Endpoints
        - POST         /api/auth/register
        - POST          /api/auth/login
        - GET           /api/users
        - GET           /api/users/find/{id}
        - DELETE        /api/users/find/{id}
        - PUT           /api/users/user/{id}/reset-password
        - PUT           /api/users/user/{id}/upgrade
